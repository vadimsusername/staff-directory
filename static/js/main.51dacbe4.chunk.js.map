{"version":3,"sources":["components/Header/index.js","components/Table/index.js","components/Search/index.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","Table","handleSortAscending","event","sorted","props","employees","sort","employeeA","employeeB","name","toLowerCase","console","log","sortEmployees","handleSortDescending","id","src","alt","onClick","this","map","row","img","phone","href","email","dob","React","Component","Search","handleInput","searchTerm","target","value","trim","filtered","filter","employee","startsWith","getEmployee","type","onChange","placeholder","App","state","staff","staffData","renderStaff","callback","dataFromSearch","setState","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"w7DAYeA,MATf,WACI,OACI,yBAAKC,UAAU,UACX,kDACA,gECqFGC,G,kNApFXC,oBAAsB,SAACC,GAEnB,IACIC,EADgB,EAAKC,MAAMC,UACJC,MAAK,SAACC,EAAUC,GACvC,OAAGD,EAAUE,KAAKC,cAAgBF,EAAUC,KAAKC,eACrC,EACHF,EAAUC,KAAKC,cAAgBH,EAAUE,KAAKC,cAC5C,EAEA,KAKf,OAFAC,QAAQC,IAAIT,GACZ,EAAKC,MAAMS,cAAcV,GAClBA,G,EAGXW,qBAAuB,SAACZ,GAEpB,IACIC,EADgB,EAAKC,MAAMC,UACJC,MAAK,SAACC,EAAUC,GACvC,OAAGD,EAAUE,KAAKC,cAAgBF,EAAUC,KAAKC,cACtC,EACFF,EAAUC,KAAKC,cAAgBH,EAAUE,KAAKC,eAC3C,EAED,KAKf,OAFAC,QAAQC,IAAIT,GACZ,EAAKC,MAAMS,cAAcV,GAClBA,G,uDAIP,OACA,+BACI,4BACI,qCAGA,4BACI,yBAAKJ,UAAU,QAAQgB,GAAG,OAAOC,IAAI,0EAA0EC,IAAI,iBAAiBC,QAASC,KAAKlB,sBADtJ,OACqL,yBAAKF,UAAU,QAAQgB,GAAG,KAAKC,IAAI,2EAA2EC,IAAI,kBAAkBC,QAASC,KAAKL,wBAEvU,qCAGA,qCAGA,oCAIFK,KAAKf,MAAMC,UAAUe,KAAI,SAAAC,GAEvB,OACI,4BACI,4BACI,yBAAKL,IAAKK,EAAIC,IAAKL,IAAI,aAE3B,4BACKI,EAAIZ,MAET,4BACKY,EAAIE,OAET,4BAEI,uBAAGC,KAAK,KAAKH,EAAII,QAErB,4BACKJ,EAAIK,c,GA5EbC,IAAMC,YCyBXC,G,kNAvBXC,YAAc,SAAC5B,GACXS,QAAQC,IAAI,aACZ,IAAImB,EAAa7B,EAAM8B,OAAOC,MAAMvB,cAAcwB,OAE9CC,EAAW,EAAK/B,MAAMC,UAAU+B,QAAO,SAAAC,GAEvC,OAAOA,EAAS5B,KAAKC,cAAc4B,WAAWP,MAIlD,EAAK3B,MAAMmC,YAAYJ,I,uDAKvB,OACA,6BACI,2BAAOK,KAAK,OAAOzB,GAAG,SAASN,KAAK,OAAOgC,SAAUtB,KAAKW,YAAaY,YAAY,gB,GAnB1Ef,IAAMC,Y,OCwBZe,E,4MArBbC,MAAQ,CACNC,MAAOC,EACPC,YAAaD,G,EAGfE,SAAW,SAACC,GACV,EAAKC,SAAS,CAACH,YAAYE,K,uDAK3B,OACE,yBAAKlD,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAQM,UAAWc,KAAKyB,MAAMC,MAAON,YAAapB,KAAK6B,WACvD,kBAAC,EAAD,CAAO3C,UAAWc,KAAKyB,MAAMG,aAAe,CAAC,CAACtC,KAAK,OAAQc,MAAM,SAAWV,cAAeM,KAAK6B,gB,GAhBtFrB,IAAMC,WCMJuB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLzD,QAAQyD,MAAMA,EAAMC,c","file":"static/js/main.51dacbe4.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Header(){\r\n    return (\r\n        <div className=\"header\">\r\n            <h1>Employee Directory</h1>\r\n            <h4>Sort by name or search by name</h4>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\n\r\nclass Table extends React.Component {\r\n\r\n    \r\n\r\n    handleSortAscending = (event) => {\r\n      \r\n        var employeesCopy = this.props.employees;\r\n        var sorted = employeesCopy.sort((employeeA,employeeB) => {\r\n            if(employeeA.name.toLowerCase() < employeeB.name.toLowerCase()){\r\n                return -1;\r\n            }else if(employeeB.name.toLowerCase() < employeeA.name.toLowerCase()){\r\n                return 1;\r\n            }else {\r\n                return 0;\r\n            }          \r\n        })\r\n        console.log(sorted);\r\n        this.props.sortEmployees(sorted);\r\n        return sorted;\r\n    };\r\n\r\n    handleSortDescending = (event) => {\r\n      \r\n        var employeesCopy = this.props.employees;\r\n        var sorted = employeesCopy.sort((employeeA,employeeB) => {\r\n            if(employeeA.name.toLowerCase() < employeeB.name.toLowerCase()){\r\n                return 1;\r\n            }else if(employeeB.name.toLowerCase() < employeeA.name.toLowerCase()){\r\n                return -1;\r\n            }else {\r\n                return 0;\r\n            }          \r\n        })\r\n        console.log(sorted);\r\n        this.props.sortEmployees(sorted);\r\n        return sorted;\r\n    };\r\n\r\n    render(){\r\n        return (\r\n        <table>\r\n            <tr>\r\n                <th>\r\n                    Image\r\n                </th>\r\n                <th >\r\n                    <img className=\"arrow\" id=\"down\" src=\"https://cdn.pixabay.com/photo/2013/07/12/13/52/arrow-147464_960_720.png\" alt=\"Sort Ascending\" onClick={this.handleSortAscending}></img>Name<img className=\"arrow\" id=\"up\" src=\"https://cdn.pixabay.com/photo/2016/03/31/18/34/arrow-1294471_960_720.png\" alt=\"Sort Descending\" onClick={this.handleSortDescending}></img>\r\n                </th>\r\n                <th>\r\n                    Phone\r\n                </th>\r\n                <th>\r\n                    Email\r\n                </th>\r\n                <th>\r\n                    DOB\r\n                </th>\r\n            </tr>\r\n            { this.props.employees.map(row => {\r\n                \r\n                return (\r\n                    <tr>\r\n                        <td>\r\n                            <img src={row.img} alt=\"Profile\"></img>\r\n                        </td>\r\n                        <td>\r\n                            {row.name}\r\n                        </td>\r\n                        <td>\r\n                            {row.phone}\r\n                        </td>\r\n                        <td>\r\n                            {/*  eslint-disable-next-line jsx-a11y/anchor-is-valid */}\r\n                            <a href=\"#\">{row.email}</a>\r\n                        </td>\r\n                        <td>\r\n                            {row.dob}\r\n                        </td>\r\n                    </tr>\r\n                )\r\n            })\r\n\r\n            }\r\n        </table>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Table;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\n\r\nclass Search extends React.Component {\r\n\r\n    handleInput = (event) => {\r\n        console.log(\"in search\");\r\n        var searchTerm = event.target.value.toLowerCase().trim();\r\n       \r\n        var filtered = this.props.employees.filter(employee => {\r\n\r\n            return employee.name.toLowerCase().startsWith(searchTerm);\r\n\r\n        });\r\n\r\n        this.props.getEmployee(filtered);\r\n        return;\r\n\r\n    }\r\n    render(){\r\n        return (\r\n        <div>\r\n            <input type=\"text\" id=\"search\" name=\"name\" onChange={this.handleInput} placeholder=\"Search\"></input>\r\n        </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Search;","import React from 'react';\nimport './App.css';\nimport Header from \"./components/Header\";\nimport Table from \"./components/Table\";\nimport Search from \"./components/Search\";\nimport staffData from \"./staff.json\";\nclass App extends React.Component {\n  state = {\n    staff: staffData,\n    renderStaff: staffData\n  }\n\n  callback = (dataFromSearch) => {\n    this.setState({renderStaff:dataFromSearch});\n\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Header />\n        <Search employees={this.state.staff} getEmployee={this.callback} />\n        <Table employees={this.state.renderStaff || [{name:\"----\", phone:\"----\"}] } sortEmployees={this.callback}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}